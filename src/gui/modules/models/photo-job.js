import _ from 'lodash'
import moment from 'moment'
import File from '../file'
import Timer from '../timer'

const debug = require('debug').default('app:modules:models:photo-job')

export default class PhotoJob {
  constructor(id, photo) {
    this.id = id
    this.photo = photo

    // Output file, this is the photo already transformed!
    this.file = File.fromPath(photo.getFolderPath(this.getFileName()))

    // Clean initialization
    this.reset()

    this.debug(`New Photo-Job instance`, {
      id: this.id,
      photo: this.photo,
      file: this.file
    })
  }

  /**
   *
   */
  reset() {
    // CLI messages
    this.cli = {
      lines: [],
      error: ''
    }

    this.isLoading = false
    this.hasFailed = false
    this.hasFinished = false

    this.timer = new Timer()
    this.file.remove()
  }

  /**
   *
   * @param {*} message
   * @param  {...any} args
   */
  debug(message, ...args) {
    debug(`[${this.photo.uuid}][${this.id}] ${message} `, ...args)
  }

  onStart() {
    this.isLoading = true
    this.timer.start()
  }

  onFinish() {
    this.isLoading = false
    this.hasFinished = true
    this.timer.stop()
  }

  getId() {
    return this.id
  }

  getPhoto() {
    return this.photo
  }

  /**
   *
   */
  getFileName() {
    const now = moment().unix()

    // Original name normalized to avoid problems
    const originalName = _.truncate(
      _.deburr(this.photo.getSourceFile().getName()),
      { length: 30, omission: '' }
    )

    return `${originalName}-${this.id}-${now}-dreamtime.png`
  }

  /**
   *
   */
  getFile() {
    return this.file
  }

  /**
   *
   */
  start() {
    return new Promise((resolve, reject) => {
      const onSpawnError = error => {
        reject(
          new AppError(
            `Unable to start the CLI!\n
            This can be caused by a corrupt installation, please make sure that the cli executable exists and works correctly.`,
            error
          )
        )
      }

      let process

      try {
        process = $tools.transform(this)
      } catch (error) {
        onSpawnError(error)
        return
      }

      process.on('error', error => {
        // Error before starting
        onSpawnError(error)
      })

      process.on('stdout', output => {
        // Output generated by the CLI
        output = output
          .toString()
          .trim()
          .split('\n')

        output.forEach(text => {
          this.cli.lines.unshift({
            text,
            css: {}
          })
        })
      })

      process.on('stderr', output => {
        // CLI error
        this.cli.lines.unshift({
          text: output,
          css: {
            'text-danger': true
          }
        })

        this.cli.error += `${output}\n`
      })

      process.on('ready', code => {
        if (code === 0) {
          // The process has been completed successfully
          // Update the output file information.
          this.file.update()
          resolve()
        } else {
          reject(
            new AppError(
              `The transformation #${this.id} has been interrupted by an CLI error. This can be caused by:\n
              - A corrupt installation (commonly: the checkpoints folder is corrupt)\n
              - Insufficient RAM. Buy more RAM!
              - If you are using GPU: The NVIDIA graphics card could not be found`,
              new Error(this.cli.error)
            )
          )
        }
      })
    })
  }
}
